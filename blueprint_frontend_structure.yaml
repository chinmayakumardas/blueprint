// === Project: Blueprint - Production Ready Frontend Architecture (JavaScript) ===

// This document outlines a real-world modular, scalable structure for a complex app
// built with Next.js 14 (App Router), Tailwind, Redux Toolkit, ShadCN UI, Axios, GSAP.
// It includes: public/protected layout, error handling, loading, sanitization, debounce, modular slices, and reusable UI.

/**
 * 📁 Folder Structure
 */

blueprint-frontend/
├── app/                      // Next.js App Router
│   ├── (auth)/               // Public routes
│   │   ├── login/page.js
│   │   ├── register/page.js
│   │   └── layout.js         // Public Layout
│   ├── (dashboard)/          // Protected, RBAC pages
│   │   ├── projects/page.js
│   │   ├── tasks/page.js
│   │   ├── bugs/page.js
│   │   └── layout.js         // Protected Layout with role checks
│   ├── not-found.js          // 404 override
│   ├── layout.js             // Root layout
│   └── page.js               // Landing page
│
├── modules/                  // Feature Modules (fully isolated)
│   ├── auth/
│   │   ├── components/
│   │   ├── slice.js
│   │   ├── services.js
│   │   ├── constants.js
│   │   └── hooks.js
│   ├── projects/
│   │   ├── components/       // ProjectCard, ProjectForm
│   │   ├── slice.js
│   │   ├── services.js
│   │   ├── hooks.js
│   │   └── constants.js
│   └── ...
│
├── components/               // Reusable global components
│   ├── layout/               // Header, Sidebar, RoleLayout
│   ├── loaders/              // PageLoader, Spinner
│   ├── ui/                   // Input, Button, Modal, Toast
│   ├── error/                // ErrorBoundary, NotFound, Fallbacks
│   └── forms/                // DynamicForm, FormRenderer
│
├── constants/                // Roles, Routes, Statuses, Themes
│   ├── roles.js
│   ├── routes.js
│   ├── endpoints.js
│   └── messages.js
│
├── store/
│   ├── index.js              // Redux store setup
│   └── rootReducer.js        // Combine slices
│
├── lib/
│   ├── axiosInstance.js      // Axios config + interceptors
│   ├── rbac.js               // Role checker
│   ├── sanitize.js           // Input cleaning
│   ├── debounce.js           // Debounce util
│   └── validators.js         // Validation utilities
│
├── hooks/
│   ├── useRoleRedirect.js
│   ├── useDebouncedValue.js
│   └── useGlobalError.js
│
├── middleware.js             // Protect RBAC pages
├── styles/
│   └── animations.css        // GSAP/Fade styles
├── public/
│
├── tailwind.config.js
├── theme.config.ts          // ShadCN theming
├── .env.local
└── next.config.js


/**
 * ✅ Sample: app/(dashboard)/projects/page.js
 */
'use client'
import { useProjects } from '@/modules/projects/hooks'
import ProjectCard from '@/modules/projects/components/ProjectCard'
import PageLoader from '@/components/loaders/PageLoader'
import ErrorFallback from '@/components/error/ErrorFallback'

export default function ProjectsPage() {
  const { loading, error, projects } = useProjects()

  if (loading) return <PageLoader />
  if (error) return <ErrorFallback message={error.message} />

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {projects.map(project => (
        <ProjectCard key={project.id} data={project} />
      ))}
    </div>
  )
}


/**
 * 📦 Sample: modules/projects/services.js
 */
import axios from '@/lib/axiosInstance'
import { sanitizeInput } from '@/lib/sanitize'

export const fetchProjects = async () => {
  const res = await axios.get('/projects')
  return res.data
}

export const createProject = async (payload) => {
  const clean = sanitizeInput(payload)
  return axios.post('/projects', clean)
}


/**
 * ♻️ Sample: lib/sanitize.js
 */
export const sanitizeInput = (input) => {
  if (typeof input === 'string') {
    return input.replace(/<[^>]*>?/gm, '').trim()
  }
  if (typeof input === 'object') {
    return Object.entries(input).reduce((acc, [key, value]) => {
      acc[key] = sanitizeInput(value)
      return acc
    }, {})
  }
  return input
}


/**
 * ⏳ Sample: components/loaders/PageLoader.js
 */
export default function PageLoader() {
  return (
    <div className="flex h-full items-center justify-center">
      <span className="animate-spin text-xl">Loading...</span>
    </div>
  )
}


/**
 * ❌ Sample: components/error/ErrorFallback.js
 */
export default function ErrorFallback({ message }) {
  return (
    <div className="p-6 text-center bg-red-100 text-red-800">
      <p>🚨 Something went wrong:</p>
      <p>{message}</p>
    </div>
  )
}


/**
 * 🚦 Sample: lib/debounce.js
 */
export const debounce = (func, delay) => {
  let timer
  return (...args) => {
    clearTimeout(timer)
    timer = setTimeout(() => {
      func(...args)
    }, delay)
  }
}


/**
 * 🚫 app/not-found.js (404)
 */
export default function NotFound() {
  return <div className="text-center text-red-600 py-10 text-xl">404 | Page Not Found</div>
}
